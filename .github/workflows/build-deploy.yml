name: Build and Deploy Code

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create env file
        run: |
          cat << EOF > .env.test
          DB_USER=${{ secrets.TEST_DB_USER }}
          DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}
          DB_NAME=${{ secrets.TEST_DB_NAME }}
          EOF

      - name: Create docker-compose.test.yml
        run: |
          cat << EOF > docker-compose.test.yml
          services:
            app:
              build: 
                context: .
                dockerfile: Dockerfile
              depends_on:
                test_db:
                  condition: service_healthy
              env_file:
                - .env.test
              command: pytest

            test_db:
              image: postgres:15
              ports:
                - "5434:5432"
              env_file:
                - .env.test   
              environment:
                - POSTGRES_USER=${{ secrets.TEST_DB_USER }}
                - POSTGRES_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}
                - POSTGRES_DB=${{ secrets.TEST_DB_NAME }}
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 5s
                timeout: 5s
                retries: 5
          EOF

      - name: Build and run tests
        run: docker compose -f docker-compose.test.yml up --build --abort-on-container-exit --exit-code-from app
        
      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yml down -v