name: Build and Deploy Code

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    environment:
      name: Testing
    env:
      DATABASE_HOSTNAME: localhost
      DATABASE_PORT: 5434
      DATABASE_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
      DATABASE_NAME: ${{ secrets.TEST_DB_NAME }}
      DATABASE_USERNAME: ${{ secrets.TEST_DB_USER }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      DEBUG_MODE: true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create docker-compose.test.yml
        run: |
          cat << EOF > docker-compose.test.yml
          services:
            test_db:
              image: postgres:15
              ports:
                - "5434:5432"
              environment:
                - POSTGRES_USER=${DATABASE_USERNAME}
                - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
                - POSTGRES_DB=${DATABASE_NAME}_test
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 5s
                timeout: 5s
                retries: 5
          EOF

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest

      - name: Start test database
        run: docker compose -f docker-compose.test.yml up -d

      - name: Wait for database
        run: sleep 5

      - name: Run tests
        run: pytest backend/tests -v

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
            
      - name: SSH to EC2 and create docker-compose.yml
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cat << EOF > /home/ec2-user/todolist/docker-compose.yml
            services:
              frontend:
                build:
                  context: ./frontend
                ports:
                  - "3000:80"
                depends_on:
                  - api
                environment:
                  - NODE_ENV=production

              api:
                build:
                  context: ./backend
                ports:
                  - "${DEBUG_MODE:+8000:80}"  
                env_file:
                  - backend/.env
                depends_on:
                  - postgres

              postgres:
                image: postgres:15
                environment:
                  POSTGRES_USER:${{secrets.DATABASE_USERNAME}}
                  POSTGRES_PASSWORD:${{secrets.DATABASE_PASSWORD}}
                  POSTGRES_DB:${{secrets.DATABASE_NAME}}
                ports:
                  - "${DEBUG_MODE:+5433:5432}" 
                volumes:
                  - postgres-db:/var/lib/postgresql/data
              
              volumes:
                  postgres-db:
            EOF

      - name: Create .env file on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cat << EOF > /home/ec2-user/todolist/backend/.env
            DATABASE_HOSTNAME=${{ secrets.DATABASE_HOSTNAME }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ALGORITHM=${{ secrets.ALGORITHM }}
            ACCESS_TOKEN_EXPIRE_MINUTES=60
            DEBUG_MODE=False
            EOF

      - name: SSH to EC2 and run Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ec2-user/todolist
             - name: SSH to EC2 and stop old containers if they exist
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user  
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ec2-user/todolist
            docker-compose --env-file backend/.env down
            docker-compose --env-file backend/.env up --build -d


